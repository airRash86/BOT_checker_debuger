import telebot
from telebot import types
import requests
import datetime
import time
from Temp_addiTional_For_BOTChecker import * 
from scheduler import DB_con
import threading
import schedule

TOKEN = <your_TOKEN>


# t.me/Checker_RashProjs_bot
# @BOT_Checker_RashProjs

bot = telebot.TeleBot(TOKEN)

    
dir_TXT_Files = 'PATH_To_TXT_STORE/'


#–û—á–∏—Å—Ç–∫–∞ .TXT —Ñ–∞–π–ª–∞(–æ–≤)
def clr_oldTXT(*args):  
    for i in args:
        open(dir_TXT_Files + i, 'w').close()
        
#–§–∏–∫—Å–∞—Ü–∏—è –≤ .TXT —Ñ–∞–π–ª—ã –Ω–∞–∑–≤–∞–Ω–∏—è –º–ø3 —Ñ–∞–π–ª–æ–≤ –∏ —Å—Ç—Ä–æ–∫ –≤ –ë–î,
#–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ª–µ–∂–∞—Ç —É–¥–∞–ª–µ–Ω–∏—é; –∞ —Ç–∞–∫–∂–µ –∫–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞ —Å–∞–π—Ç–∞: 200 –∏–ª–∏ –Ω–µ—Ç        
def w_newTXT(unp_uniq_mp3, unp_uniq_DB, pop200orNOT):  
    if unp_uniq_mp3:                                                                        
        with open(dir_TXT_Files + "unp_uniq_mp3.txt", "a") as File:
            for i in unp_uniq_mp3:
                File.write(str(i)+'\n')
    if unp_uniq_DB:
        with open(dir_TXT_Files + "unp_uniq_DB.txt", "a") as File:
            for i in unp_uniq_DB:
                File.write(str(i)+'\n')
    with open(dir_TXT_Files + "w200orNOT.txt", "a") as File:
        File.write(str(pop200orNOT))

#–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–ø3 —Ñ–∞–π–ª–æ–≤, —Å—Ç—Ä–æ–∫ –≤ –ë–î –∏ –æ—Ç–∫–ª–∏–∫–∞ —Å–∞–π—Ç–∞ 
def unpacking(compose):     
    pop200orNOT = compose.pop()
    unp_uniq_mp3 = compose[:compose.index ('<-Fdb->')]
    unp_uniq_DB = compose[compose.index ('<-Fdb->')+1:]
    clr_oldTXT("unp_uniq_mp3.txt", "unp_uniq_DB.txt", "w200orNOT.txt")
    w_newTXT(unp_uniq_mp3, unp_uniq_DB, pop200orNOT)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ msg –∏–∑ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ–±—â–µ–≥–æ –ø–∏–Ω–≥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–æ—Ç–æ–≤
@bot.channel_post_handler()  
def hello(message):
    if message.chat.id == idTgChannel and message.text == 'TOTAL':
        time.sleep(1.5)
        try:
            chech_Files_DB = DB_con()   #–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—ç–∫–µ–Ω–¥–∞ —Å–∞–π—Ç–∞ rashprojs.ru/voiceworker/
            mark = 'üöÄ–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –∞–Ω–æ–º–∞–ª–∏–π!\n-----\n'
            if chech_Files_DB != '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –∞–Ω–æ–º–∞–ª–∏–π':
                unpack = unpacking(chech_Files_DB)
                comp_F_DB()
                mark = '‚ÑπÔ∏è–ï—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ñ–¥–∏ MSG –≤ –ª–∏—á–∫—É\n-----\n'   
        except:
            mark = '‚ö†ALARM, –≤–æ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n-----\n'
        time.sleep(0.05)
        send(F'{mark} –¢—Ä–µ—Ç–∏–π (–ß–µ–∫–µ—Ä) 5288033405 - ‚úÖONLINE"', TOKEN) #–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±—ç–∫–∞ —Å–∞–π—Ç–∞ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—â–µ–≥–æ –ø–∏–Ω–≥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–æ—Ç–æ–≤

#–ü–æ—á—Ç–∏ "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è" —Ñ—É–Ω–∫—Ü–∏—è)  
def swhoORdeling_From_DBorMP3orResp(mode, nameFile): # 0 - –≤—ã–≤–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∞–¥–º–∏–Ω—É, 1 - —É–¥–∞–ª–µ–Ω–µ –∏–∑ –ë–î —Å—Ç—Ä–æ–∫ –∏ –∏–∑ –ø–∞–ø–∫–∏ media –º–ø3 —Ñ–∞–π–ª–æ–≤
    with open(dir_TXT_Files + nameFile) as F:
        lines = [line.rstrip('\n') for line in F]
    if mode == 0:
        show = ''
        for j in lines:
            show += j+'\n'
        return show
    elif mode == 1 and nameFile == "unp_uniq_DB.txt":
        if len(lines) == 0:
            return 2
        push_DDB = push_DelDB(lines)
        if push_DDB == 1:
            clr_oldTXT("unp_uniq_DB.txt")
            return 1
        else:
            return 0
    elif mode == 1 and nameFile == "unp_uniq_mp3.txt":
        if len(lines) == 0:
            return 2
        dMP3 = del_MP3s(lines)
        if dMP3 == 1:
            clr_oldTXT("unp_uniq_mp3.txt")
            return 1
        else:
            return 0

#–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è "–ª–∏—à–Ω–∏—Ö" –º–ø3 —Ñ–∞–π–ª–æ–≤ –∏(–∏–ª–∏) —Å—Ç—Ä–æ–∫ –≤ –ë–î,
#–≤—ã—Å–∞–ª–∫–∞ –≤ –ª–∏—á–∫—É –∞–¥–º–∏–Ω—É    
def comp_F_DB():
    showDB = swhoORdeling_From_DBorMP3orResp(0, "unp_uniq_DB.txt")
    showFiles = swhoORdeling_From_DBorMP3orResp(0, "unp_uniq_mp3.txt")
    showResp = swhoORdeling_From_DBorMP3orResp(0, "w200orNOT.txt")
    BUTT_Del = types.InlineKeyboardMarkup()
    canc = types.InlineKeyboardButton(text = "‚úÖok", callback_data = 'norm')
    LSTargs_ForBUTT = []
    show_in_mess = 'üì°Response: ' + showResp +'\n–°–ø–∏—Å–æ–∫ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç)\n-----\n'
    if showDB:
        d_DB = types.InlineKeyboardButton(text = "‚õîüìúDel DB", callback_data = 'Del_DB')
        show_in_mess += 'üìú–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ë–î:\n' + showDB + '-----\n'
        LSTargs_ForBUTT.insert(0, d_DB)
    if showFiles:
        d_Fil = types.InlineKeyboardButton(text = "‚õîüì¢Del mp3", callback_data = 'Del_mp3')
        show_in_mess += 'üì¢–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ MP3:\n' + showFiles 
        LSTargs_ForBUTT.insert(0, d_Fil)
    LSTargs_ForBUTT.append(canc)
    args_ForBUTT = tuple(LSTargs_ForBUTT)
    BUTT_Del.add(*args_ForBUTT) # —Ä–∞—Å–ø–∞–∫–æ–≤–∞–ª –∫–æ—Ä—Ç–µ–∂
    bot.send_message(TG_id_admin, show_in_mess, reply_markup=BUTT_Del)

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func = lambda call: True)
def ans_Inline(call):
    if call.data == 'Del_mp3':
        DelFil = swhoORdeling_From_DBorMP3orResp(1, "unp_uniq_mp3.txt")
        if DelFil == 1:
            bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="‚úÖmp3 —Ñ–∞–π–ª—ã –ø–æ—á–∏—â–µ–Ω—ã")
        elif DelFil == 2:
            bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="‚ùó–ß–∏—Å—Ç–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –•–≤–∞—Ç–∏—Ç —Ç—ã–∫–∞—Ç—å!")
        elif DelFil == 0:
            bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="‚ö†–í–æ –≤—Ä–µ–º—è —Ä—É—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è MP3-—Ñ–∞–π–ª–æ–≤ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: –ø–æ–ø—Ä–æ–±—É–π TOTAL –≤ —á–∞—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ —á—É—Ç—å –ø–æ–∑–∂–µ")
    elif call.data == 'Del_DB':
        DelDB = swhoORdeling_From_DBorMP3orResp(1, "unp_uniq_DB.txt")
        if DelDB == 1:
            bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="‚úÖ–ë–î –ø–æ—á–∏—â–µ–Ω–∞")
        elif DelDB == 2:
            bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="‚ùó–ß–∏—Å—Ç–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –•–≤–∞—Ç–∏—Ç —Ç—ã–∫–∞—Ç—å!")
        elif DelDB == 0:
            bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="‚ö†–í–æ –≤—Ä–µ–º—è —Ä—É—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: –ø–æ–ø—Ä–æ–±—É–π TOTAL –≤ —á–∞—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ —á—É—Ç—å –ø–æ–∑–∂–µ")
    elif call.data == 'norm':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text='‚úÖ–ì–æ—Ç–æ–≤–æ') #—É–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ã
        pass
    bot.answer_callback_query(callback_query_id=call.id) #—ç—Ç–æ —á—Ç–æ–±—ã –∏–∫–æ–Ω–∫–∞ —á–∞—Å–æ–≤ –Ω–µ –≤–∏—Å–µ–ª–∞ –Ω–∞ –∫–Ω–æ–ø–∫–µ 

#–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—Ç—Å—è –ø–∏–Ω–≥–∞–Ω—É—Ç—å —Ä—É–∫–∞–º–∏
@bot.message_handler(content_types=['text'])
def abc(message):
    bot.send_message(message.chat.id, '–†–∞–±–æ—Ç–∞—é!')
    
# ------------ –ë–ª–æ–∫ –µ–∂–µ–≤–µ—á–µ—Ä–Ω–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—ç–∫–∞ —Å–∞–π—Ç–∞ —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º –Ω–∞–∫–æ–ø–∏–≤—à–∏–∏—Ö—Å—è –∑–∞ —Å—É—Ç–∫–∏ –º–ø3 —Ñ–∞–π–ª–æ–≤ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–º –∑–∞–ø–∏—Å–µ–π –≤ –ë–î,\
def layer():                            #–∞ —Ç–∞–∫–∂–µ —Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º –ø–∏–Ω–≥–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤, "–≤–∏—Å—è—â–∏—Ö" –≤ –∫–∞–Ω–∞–ª–µ –¥–ª—è –æ–±—â–µ–≥–æ –ø–∏–Ω–≥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–æ—Ç–æ–≤ (–∫–æ–º–∞–Ω–¥–∞: TOTAL)
    dayly_check()
    send(F'–ë–æ—Ç-–ß–µ–∫–µ—Ä - ‚úÖONLINE\n–ï–∂–µ–≤–µ—á–µ—Ä–Ω—é—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–≤—ë–ª.\n–ö–æ–º–∞–Ω–¥–∞: TOTAL', TOKEN)
    
schedule.every().day.at("23:09:45").do(layer) #–≠—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –î–∂–∞–Ω–≥–æ —Å–∏–≥–Ω–∞–ª (–∑–Ω–∞—é –æ–± —ç—Ç–æ–º —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–æ—Ä–∏–∏), –Ω–æ –æ—Å—Ç–∞–≤–∏–ª —Ç–∞–∫
def go():
    while 1:
        schedule.run_pending()
        time.sleep(1)

TTT = threading.Thread(target=go, name="daily")
TTT.start()
# --------------

while True:
    try:
        print('–¢—Ä–∏-–¥–≤–∞-—Ä–∞–∑, –î–µ–±–∞–≥-–ë–û–¢ –°–¢–ê–†–¢–ê–ù–£–õ')
        bot.polling(none_stop=True, timeout=123)
    except:
        time.sleep(5)
        continue





